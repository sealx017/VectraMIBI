group_by(Group) %>%
summarise_all(mean, na.rm = TRUE)
summary_mean = df %>%
group_by(Group) %>%
summarise_all(mean, na.rm = TRUE)
summary_mean
rownames(summary_mean) = summary_mean[,1];
summary_mean = df %>%
group_by(Group) %>%
summarise_all(mean, na.rm = TRUE)
summary_mean = as.matrix(summary_mean)
rownames(summary_mean) = summary_mean[,1];
summary_mean = summary_mean[,-1]
summary_mean
pheatmap::pheatmap(t(summary_mean), cluster_cols = F, cluster_rows = F)
summary_mean = df %>%
group_by(Group) %>%
summarise_all(mean, na.rm = TRUE)
summary_mean = as.matrix(summary_mean)
summary_mean
summary_mean = df %>%
group_by(Group) %>%
summarise_all(mean, na.rm = TRUE)
summary_mean = as.data.frame(summary_mean)
summary_mean
devtools::install()
require(VectraMIBI)
VectraMIBI::genheatmap()
VectraMIBI::genheatmap
training_dat = train_data[,-c(1,2)]
is.log
cl<-parallel::makePSOCKcluster(n_cores)
doParallel::registerDoParallel(cl)
classifier_rf  <- caret::train(Group~.,train_data,method="rf")
parallel::stopCluster(cl)
training_part<-function(train_data, is.log = FALSE){
if(is.log==TRUE){
training_dat = cbind(train_data$Group,log((train_data[,-1]+1),base = 2))
colnames(train_data)[1] = "Group"
}
cl<-parallel::makePSOCKcluster(n_cores)
doParallel::registerDoParallel(cl)
classifier_rf  <- caret::train(Group~.,train_data,method="rf")
parallel::stopCluster(cl)
return(list(RFclassifier = classifier_rf, Proportion = proportion_getter(training_dat)))
}
training_part(training_dat = train_data[,-c(1,2)])
proportion_getter<-function(data)
{
prop = NULL
i = 1
for(x in unique(data$Group))
{
res = data.frame(length(which(data$Group==x)))
colnames(res) = paste0(x)
if(i==1){prop = res}
else prop = data.frame(prop,res)
i = i+1
}
colnames(prop) = unique(data$Group)
return(prop)
}
proportion_getter( train_data[,-c(1,2)])
devtools::install()
devtools::install()
head(train_data)
dim(full_data)
RFclassi = run_train$RFclassifier
run_train = training_part(train_data = train_data[,-c(1,2)])
testing_function<-function(RFclassi, is.log=FALSE)
{
k = 1
Predicted_data_frame = NULL
num_patients =  length(unique(full_data$SampleID))
for(i in c(1:num_patients))
{
data_image = full_data[full_data$SampleID==unique(full_data$SampleID)[i],]
data_indices = which(full_data$SampleID==unique(full_data$SampleID)[i])
if(is.log == FALSE){
uniq_dat = df[data_indices,-1]}
else uniq_dat = df_log[data_indices,-1]
test_dat = as.data.frame(uniq_dat)
colnames(test_dat) = paste0("x",1:(ncol(test_dat)))
Predictions = predict(RFclassi, test_dat)
labels_test = df[data_indices,]$Group;
if(i==1){Predicted_data_frame = data.frame(data_image[data_indices,1:2], Predicted = Predictions)}
else{Predicted_data_frame = rbind(Predicted_data_frame,data.frame(data_image[data_indices,1:2],
Predicted = Predictions))}
k = k+1
}
return(Predicted_data_frame)
}
result = testing_function(RFclassi)
RFclassi = run_train$RFclassifier
result = testing_function(RFclassi)
testing_function<-function(RFclassi, is.log=FALSE)
{
k = 1
Predicted_data_frame = NULL
num_patients =  length(unique(full_data$SampleID))
for(i in c(1:num_patients))
{
data_image = full_data[full_data$SampleID==unique(full_data$SampleID)[i],]
data_indices = which(full_data$SampleID==unique(full_data$SampleID)[i])
if(is.log == FALSE){
uniq_dat = df[data_indices,-1]}
else uniq_dat = df_log[data_indices,-1]
test_dat = as.data.frame(uniq_dat)
#colnames(test_dat) = paste0("x",1:(ncol(test_dat)))
Predictions = predict(RFclassi, test_dat)
labels_test = df[data_indices,]$Group;
if(i==1){Predicted_data_frame = data.frame(data_image[data_indices,1:2], Predicted = Predictions)}
else{Predicted_data_frame = rbind(Predicted_data_frame,data.frame(data_image[data_indices,1:2],
Predicted = Predictions))}
k = k+1
}
return(Predicted_data_frame)
}
RFclassi = run_train$RFclassifier
result = testing_function(RFclassi)
is.log
i
k = 1
Predicted_data_frame = NULL
num_patients =  length(unique(full_data$SampleID))
i = 1
data_image = full_data[full_data$SampleID==unique(full_data$SampleID)[i],]
data_indices = which(full_data$SampleID==unique(full_data$SampleID)[i])
uniq_dat = df[data_indices,-1]
test_dat = as.data.frame(uniq_dat)
#colnames(test_dat) = paste0("x",1:(ncol(test_dat)))
Predictions = predict(RFclassi, test_dat)
labels_test = df[data_indices,]$Group;
Predicted_data_frame = data.frame(data_image[data_indices,1:2], Predicted = Predictions)
k = 1
Predicted_data_frame = NULL
num_patients =  length(unique(full_data$SampleID))
for(i in c(1:num_patients))
{
data_image = full_data[full_data$SampleID==unique(full_data$SampleID)[i],]
data_indices = which(full_data$SampleID==unique(full_data$SampleID)[i])
if(is.log == FALSE){
uniq_dat = df[data_indices,-1]}
else uniq_dat = df_log[data_indices,-1]
test_dat = as.data.frame(uniq_dat)
#colnames(test_dat) = paste0("x",1:(ncol(test_dat)))
Predictions = predict(RFclassi, test_dat)
labels_test = df[data_indices,]$Group;
if(i==1){Predicted_data_frame = data.frame(data_image[data_indices,1:2], Predicted = Predictions)}
else{Predicted_data_frame = rbind(Predicted_data_frame,data.frame(data_image[data_indices,1:2],
Predicted = Predictions))}
k = k+1
}
i
k = 1
Predicted_data_frame = NULL
num_patients =  length(unique(full_data$SampleID))
i = 1
data_image = full_data[full_data$SampleID==unique(full_data$SampleID)[i],]
data_indices = which(full_data$SampleID==unique(full_data$SampleID)[i])
if(is.log == FALSE){
uniq_dat = df[data_indices,-1]}
test_dat = as.data.frame(uniq_dat)
#colnames(test_dat) = paste0("x",1:(ncol(test_dat)))
Predictions = predict(RFclassi, test_dat)
labels_test = df[data_indices,]$Group;
Predicted_data_frame = data.frame(data_image[data_indices,1:2], Predicted = Predictions)
Predicted_data_frame
i = 2
data_image = full_data[full_data$SampleID==unique(full_data$SampleID)[i],]
data_indices = which(full_data$SampleID==unique(full_data$SampleID)[i])
uniq_dat = df[data_indices,-1]
test_dat = as.data.frame(uniq_dat)
#colnames(test_dat) = paste0("x",1:(ncol(test_dat)))
Predictions = predict(RFclassi, test_dat)
labels_test = df[data_indices,]$Group;
rbind(Predicted_data_frame,data.frame(data_image[data_indices,1:2],
Predicted = Predictions))
z = (data.frame(data_image[data_indices,1:2],
Predicted = Predictions))
is.log
k = 1
Predicted_data_frame = NULL
num_patients =  length(unique(full_data$SampleID))
for(i in c(1:num_patients))
{
data_image = full_data[full_data$SampleID==unique(full_data$SampleID)[i],]
data_indices = which(full_data$SampleID==unique(full_data$SampleID)[i])
if(is.log == FALSE){
uniq_dat = df[data_indices,-1]}
else uniq_dat = df_log[data_indices,-1]
test_dat = as.data.frame(uniq_dat)
#colnames(test_dat) = paste0("x",1:(ncol(test_dat)))
Predictions = predict(RFclassi, test_dat)
labels_test = df[data_indices,]$Group;
if(i==1){Predicted_data_frame = data.frame(data_image[,1:2], Predicted = Predictions)}
else{Predicted_data_frame = rbind(Predicted_data_frame,data.frame(data_image[,1:2],
Predicted = Predictions))}
k = k+1
}
i
data_image = full_data[full_data$SampleID==unique(full_data$SampleID)[i],]
data_indices = which(full_data$SampleID==unique(full_data$SampleID)[i])
dim(data_image)
data_indices
uniq_dat = df[data_indices,-1]
uniq_dat
test_dat = as.data.frame(uniq_dat)
#colnames(test_dat) = paste0("x",1:(ncol(test_dat)))
Predictions = predict(RFclassi, test_dat)
Predictions
test_dat
dim(test_dat)
head(test_dat)
RFclassi
predict(RFclassi, test_dat)
length(predict(RFclassi, test_dat))
dim(test_dat)
head(test_dat)
RFclassi
training_part<-function(train_data, is.log = FALSE){
if(is.log==TRUE){
train_data = cbind(train_data$Group,log((train_data[,-1]+1),base = 2))
colnames(train_data)[1] = "Group"
}
colnames(train_data)[-1] = paste0("x",1:(ncol(train_data)-1))
cl<-parallel::makePSOCKcluster(n_cores)
doParallel::registerDoParallel(cl)
classifier_rf  <- caret::train(Group~.,train_data,method="rf")
parallel::stopCluster(cl)
return(list(RFclassifier = classifier_rf, Proportion = proportion_getter(train_data)))
}
run_train = training_part(train_data = train_data[,-c(1,2)])
RFclassi = run_train$RFclassifier
testing_function<-function(RFclassi, is.log=FALSE)
{
k = 1
Predicted_data_frame = NULL
num_patients =  length(unique(full_data$SampleID))
for(i in c(1:num_patients))
{
data_image = full_data[full_data$SampleID==unique(full_data$SampleID)[i],]
data_indices = which(full_data$SampleID==unique(full_data$SampleID)[i])
if(is.log == FALSE){
uniq_dat = df[data_indices,-1]}
else uniq_dat = df_log[data_indices,-1]
test_dat = as.data.frame(uniq_dat)
colnames(test_dat) = paste0("x",1:(ncol(test_dat)))
Predictions = predict(RFclassi, test_dat)
if(i==1){Predicted_data_frame = data.frame(data_image[,1:2], Predicted = Predictions)}
else{Predicted_data_frame = rbind(Predicted_data_frame,data.frame(data_image[,1:2],
Predicted = Predictions))}
k = k+1
}
return(Predicted_data_frame)
}
k = 1
Predicted_data_frame = NULL
num_patients =  length(unique(full_data$SampleID))
for(i in c(1:num_patients))
{
data_image = full_data[full_data$SampleID==unique(full_data$SampleID)[i],]
data_indices = which(full_data$SampleID==unique(full_data$SampleID)[i])
if(is.log == FALSE){
uniq_dat = df[data_indices,-1]}
else uniq_dat = df_log[data_indices,-1]
test_dat = as.data.frame(uniq_dat)
colnames(test_dat) = paste0("x",1:(ncol(test_dat)))
Predictions = predict(RFclassi, test_dat)
if(i==1){Predicted_data_frame = data.frame(data_image[,1:2], Predicted = Predictions)}
else{Predicted_data_frame = rbind(Predicted_data_frame,data.frame(data_image[,1:2],
Predicted = Predictions))}
k = k+1
}
k = 1
Predicted_data_frame = NULL
num_patients =  length(unique(full_data$SampleID))
for(i in c(1:num_patients))
{
data_image = full_data[full_data$SampleID==unique(full_data$SampleID)[i],]
data_indices = which(full_data$SampleID==unique(full_data$SampleID)[i])
if(is.log == FALSE){
uniq_dat = df[data_indices,-1]}
else uniq_dat = df_log[data_indices,-1]
test_dat = as.data.frame(uniq_dat)
colnames(test_dat) = paste0("x",1:(ncol(test_dat)))
Predictions = caret::predict(RFclassi, test_dat)
if(i==1){Predicted_data_frame = data.frame(data_image[,1:2], Predicted = Predictions)}
else{Predicted_data_frame = rbind(Predicted_data_frame,data.frame(data_image[,1:2],
Predicted = Predictions))}
k = k+1
}
i
k = 1
Predicted_data_frame = NULL
num_patients =  length(unique(full_data$SampleID))
i = 1
data_image = full_data[full_data$SampleID==unique(full_data$SampleID)[i],]
data_indices = which(full_data$SampleID==unique(full_data$SampleID)[i])
if(is.log == FALSE){
uniq_dat = df[data_indices,-1]}
else uniq_dat = df_log[data_indices,-1]
test_dat = as.data.frame(uniq_dat)
colnames(test_dat) = paste0("x",1:(ncol(test_dat)))
Predictions = predict(RFclassi, test_dat)
dim(test_dat)
length(Predictions)
i = 2
data_image = full_data[full_data$SampleID==unique(full_data$SampleID)[i],]
data_indices = which(full_data$SampleID==unique(full_data$SampleID)[i])
if(is.log == FALSE){
uniq_dat = df[data_indices,-1]}
else uniq_dat = df_log[data_indices,-1]
test_dat = as.data.frame(uniq_dat)
colnames(test_dat) = paste0("x",1:(ncol(test_dat)))
Predictions = predict(RFclassi, test_dat)
length(Predictions)
dim(test_dat)
i = 4
data_image = full_data[full_data$SampleID==unique(full_data$SampleID)[i],]
data_indices = which(full_data$SampleID==unique(full_data$SampleID)[i])
if(is.log == FALSE){
uniq_dat = df[data_indices,-1]}
else uniq_dat = df_log[data_indices,-1]
test_dat = as.data.frame(uniq_dat)
colnames(test_dat) = paste0("x",1:(ncol(test_dat)))
Predictions = predict(RFclassi, test_dat)
unique(full_data$SampleID)
data_image = full_data[full_data$SampleID==unique(full_data$SampleID)[i],]
data_indices = which(full_data$SampleID==unique(full_data$SampleID)[i])
data_image
data_indices = which(full_data$SampleID==unique(full_data$SampleID)[i])
uniq_dat = df[data_indices,-1]
df = full_data[,-c(1,2)]
k = 1
Predicted_data_frame = NULL
num_patients =  length(unique(full_data$SampleID))
for(i in c(1:num_patients))
{
data_image = full_data[full_data$SampleID==unique(full_data$SampleID)[i],]
data_indices = which(full_data$SampleID==unique(full_data$SampleID)[i])
if(is.log == FALSE){
uniq_dat = df[data_indices,-1]}
else uniq_dat = df_log[data_indices,-1]
test_dat = as.data.frame(uniq_dat)
colnames(test_dat) = paste0("x",1:(ncol(test_dat)))
Predictions = predict(RFclassi, test_dat)
if(i==1){Predicted_data_frame = data.frame(data_image[,1:2], Predicted = Predictions)}
else{Predicted_data_frame = rbind(Predicted_data_frame,data.frame(data_image[,1:2],
Predicted = Predictions))}
k = k+1
}
result = testing_function(RFclassi)
head(result)
#cell_data = read.csv("Data/cellData.csv")
#groups = c("Unidentified", "Immune", "Endothelial", "Mesenchymal-like", "Tumor", "Keratin-positive tumor")
#cell_data$Group = as.factor(cell_data$Group)
#levels(cell_data$Group) <- groups
#write.csv(cell_data,"Data/Full_cellData.csv",row.names = F)
cell_data = read.csv("Data/Full_cellData.csv")
getwd()
#write.csv(cell_data[,columns_of_interest],"Data/Full_cellData_pruned.csv",row.names = F)
cell_data = read.csv("Data/Full_cellData_pruned.csv")
head(cell_data)
write.csv(cell_data[,-3],"Data/Full_cellData_pruned.csv",row.names = F)
dim(cell_data)
df[data_indices,-1]
log(df[data_indices,-1]+1,base = 2)
head(Predicted_data_frame)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#",
out.width = "100%",
messages = FALSE,
warnings = FALSE
)
require(VectraMIBI)
require(dplyr)
require(data.table)
require(pheatmap)
require(ggplot2)
require(ggridges)
require(caret)
devtools::document()
devtools::document()
devtools::document()
devtools::install()
require(VectraMIBI)
require(dplyr)
require(data.table)
require(pheatmap)
require(ggplot2)
require(ggridges)
require(caret)
train_data = read.csv("Data/Training_Data.csv")
head(train_data[,1:5])
full_data = read.csv("Data/Full_cellData_pruned.csv")
head(full_data[,1:5])
n_cores = parallel::detectCores()-1
print(n_cores)
summ_cell(train_data)
dft = train_data[,-c(1,2)]
#genheatmap(df,is.log=FALSE)
genheatmap(dft,is.log=TRUE)
interested_trait = c("Vimentin")
ridge_plottter(train_data,interested_trait,is.log="TRUE")
df = full_data[,-c(1,2)]
run_train = training_part(train_data = train_data[,-c(1,2)])
RFclassi = run_train$RFclassifier
result = test_function(full_data, RFclassi)
training_part<-function(train_data, is.log = FALSE){
if(is.log==TRUE){
train_data = cbind(train_data$Group,log((train_data[,-1]+1),base = 2))
colnames(train_data)[1] = "Group"
}
#colnames(train_data)[-1] = paste0("x",1:(ncol(train_data)-1))
cl<-parallel::makePSOCKcluster(n_cores)
doParallel::registerDoParallel(cl)
classifier_rf  <- caret::train(Group~.,train_data,method="rf")
parallel::stopCluster(cl)
return(list(RFclassifier = classifier_rf, Proportion = proportion_getter(train_data)))
}
test_function<-function(test_data, RFclassi, is.log=FALSE)
{
k = 1
Predicted_data_frame = NULL
num_patients =  length(unique(test_data$SampleID))
for(i in c(1:num_patients))
{
data_image = test_data[test_data$SampleID==unique(test_data$SampleID)[i],]
data_indices = which(test_data$SampleID==unique(test_data$SampleID)[i])
if(is.log == FALSE){
uniq_dat = df[data_indices,-1]}
else uniq_dat = log(df[data_indices,-1]+1,base = 2)
test_dat = as.data.frame(uniq_dat)
#colnames(test_dat) = paste0("x",1:(ncol(test_dat)))
Predictions = predict(RFclassi, test_dat)
if(i==1){Predicted_data_frame = data.frame(data_image[,1:2], Predicted = Predictions)}
else{Predicted_data_frame = rbind(Predicted_data_frame,data.frame(data_image[,1:2],
Predicted = Predictions))}
k = k+1
}
return(Predicted_data_frame)
}
df = full_data[,-c(1,2)]
run_train = training_part(train_data = train_data[,-c(1,2)])
RFclassi = run_train$RFclassifier
result = test_function(full_data, RFclassi)
head(train_data)
head(test_data)
head(full_data)
k = 1
Predicted_data_frame = NULL
num_patients =  length(unique(test_data$SampleID))
test_data = full_data
k = 1
Predicted_data_frame = NULL
num_patients =  length(unique(test_data$SampleID))
data_image = test_data[test_data$SampleID==unique(test_data$SampleID)[i],]
data_indices = which(test_data$SampleID==unique(test_data$SampleID)[i])
if(is.log == FALSE){
uniq_dat = df[data_indices,-1]}
else uniq_dat = log(df[data_indices,-1]+1,base = 2)
test_dat = as.data.frame(uniq_dat)
#colnames(test_dat) = paste0("x",1:(ncol(test_dat)))
Predictions = predict(RFclassi, test_dat)
head(uniq_dat)
k = 1
Predicted_data_frame = NULL
num_patients =  length(unique(test_data$SampleID))
for(i in c(1:num_patients))
{
data_image = test_data[test_data$SampleID==unique(test_data$SampleID)[i],]
data_indices = which(test_data$SampleID==unique(test_data$SampleID)[i])
if(is.log == FALSE){
uniq_dat = df[data_indices,]}
else uniq_dat = log(df[data_indices,]+1,base = 2)
test_dat = as.data.frame(uniq_dat)
#colnames(test_dat) = paste0("x",1:(ncol(test_dat)))
Predictions = predict(RFclassi, test_dat)
if(i==1){Predicted_data_frame = data.frame(data_image[,1:2], Predicted = Predictions)}
else{Predicted_data_frame = rbind(Predicted_data_frame,data.frame(data_image[,1:2],
Predicted = Predictions))}
k = k+1
}
test_function<-function(test_data, RFclassi, is.log=FALSE)
{
k = 1
Predicted_data_frame = NULL
num_patients =  length(unique(test_data$SampleID))
for(i in c(1:num_patients))
{
data_image = test_data[test_data$SampleID==unique(test_data$SampleID)[i],]
data_indices = which(test_data$SampleID==unique(test_data$SampleID)[i])
if(is.log == FALSE){
uniq_dat = df[data_indices,]}
else uniq_dat = log(df[data_indices,]+1,base = 2)
test_dat = as.data.frame(uniq_dat)
#colnames(test_dat) = paste0("x",1:(ncol(test_dat)))
Predictions = predict(RFclassi, test_dat)
if(i==1){Predicted_data_frame = data.frame(data_image[,1:2], Predicted = Predictions)}
else{Predicted_data_frame = rbind(Predicted_data_frame,data.frame(data_image[,1:2],
Predicted = Predictions))}
k = k+1
}
return(Predicted_data_frame)
}
result = test_function(full_data, RFclassi)
devtools::document()
devtools::install()
require()VectraMIBI
require(VectraMIBI)
