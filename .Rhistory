labels_train = rbind(labels_train,as.matrix(get(paste0("image",i))[,1]))}
i = i+1
}
training_dat = data.frame(as.matrix(Training.data), Group = labels_train)
colnames(training_dat)[-ncol(training_dat)] = paste0("x",1:(ncol(training_dat)-1))
training_dat$Group = as.factor(training_dat$Group)
head(training_dat)
head(Training.data)
x
data_image = selected_data[selected_data$SampleID==unique(selected_data$SampleID)[x],]
head(data_image)
data_indices = which(selected_data$SampleID==unique(selected_data$SampleID)[x])
# if(is.log == TRUE){
#   df = cbind(df$Group,log((df[,-1]+1),base = 2))
#   colnames(df)[1] = "Group"
# }
uniq_dat = data_image[data_indices,]
uniq_dat
data_indices
i = 1
for(x in chosen_images){
data_image = selected_data[selected_data$SampleID==unique(selected_data$SampleID)[x],]
#data_indices = which(selected_data$SampleID==unique(selected_data$SampleID)[x])
# if(is.log == TRUE){
#   df = cbind(df$Group,log((df[,-1]+1),base = 2))
#   colnames(df)[1] = "Group"
# }
#uniq_dat = data_image[data_indices,]
assign(paste0("image",i),data_image)
i = i+1
}
i = 1
x = chosen_images[1]
Training.data = get(paste0("image",i))
head(Training.data)
i = 1
for(x in chosen_images){
data_image = selected_data[selected_data$SampleID==unique(selected_data$SampleID)[x],]
#data_indices = which(selected_data$SampleID==unique(selected_data$SampleID)[x])
# if(is.log == TRUE){
#   df = cbind(df$Group,log((df[,-1]+1),base = 2))
#   colnames(df)[1] = "Group"
# }
#uniq_dat = data_image[data_indices,]
assign(paste0("image",i),data_image)
i = i+1
}
i = 1
for(x in chosen_images){
if(i==1){Training.data = get(paste0("image",i));
#labels_train = as.matrix(get(paste0("image",i))[,1])
}
else{Training.data = plyr::rbind.fill(Training.data,get(paste0("image",i)));
#labels_train = rbind(labels_train,as.matrix(get(paste0("image",i))[,1]))
}
i = i+1
}
head(Training.data)
train_data = making_training_data()
making_training_data<-function(chosen_images,selected_data = cell_data)
{
i = 1
for(x in chosen_images){
data_image = selected_data[selected_data$SampleID==unique(selected_data$SampleID)[x],]
#data_indices = which(selected_data$SampleID==unique(selected_data$SampleID)[x])
# if(is.log == TRUE){
#   df = cbind(df$Group,log((df[,-1]+1),base = 2))
#   colnames(df)[1] = "Group"
# }
#uniq_dat = data_image[data_indices,]
assign(paste0("image",i),data_image)
i = i+1
}
i = 1
for(x in chosen_images){
if(i==1){Training.data = get(paste0("image",i));
#labels_train = as.matrix(get(paste0("image",i))[,1])
}
else{Training.data = plyr::rbind.fill(Training.data,get(paste0("image",i)));
#labels_train = rbind(labels_train,as.matrix(get(paste0("image",i))[,1]))
}
i = i+1
}
#training_dat = data.frame(as.matrix(Training.data), Group = labels_train)
#colnames(training_dat)[-ncol(training_dat)] = paste0("x",1:(ncol(training_dat)-1))
#training_dat$Group = as.factor(training_dat$Group)
#return(training_dat)
return(Training.data)
}
train_data = making_training_data()
train_data = making_training_data(chosen_images,cell_data)
dim(train_data)
write(run_train,file = "Data/Training_Data.csv",row.names=F)
write.csv(run_train,file = "Data/Training_Data.csv",row.names=F)
write.csv(train_data,file = "Data/Training_Data.csv",row.names=F)
floor(num_patients*0.1)
floor(num_patients*0.05)
sampling_scheme="random"
number_of_images_chosen = floor(num_patients*0.05)+1
chosen = NULL
sampling_scheme = "random"
is.log = "TRUE"
chosen_images = NULL
if(sampling_scheme=="random"){chosen_images = sample(1:num_patients,
number_of_images_chosen)}
chosen_images
number_of_images_chosen = floor(num_patients*0.02)+1
number_of_images_chosen
number_of_images_chosen = floor(num_patients*0.03)+1
number_of_images_chosen
sampling_scheme = "random"
is.log = "TRUE"
chosen_images = NULL
if(sampling_scheme=="random"){chosen_images = sample(1:num_patients,
number_of_images_chosen)}
chosen_images = unique(chosen_images)
nonchosen_images = setdiff(1:num_patients,chosen_images)
result = NULL
chosen_images
train_data = making_training_data(chosen_images,cell_data)
write.csv(train_data,file = "Data/Training_Data.csv",row.names=F)
dim(train_data)
train_data = read.csv("Data/Training_Data.csv")
head(train_data)
training_part<-function(training_dat){
cl<-parallel::makePSOCKcluster(n_cores)
doParallel::registerDoParallel(cl)
knnclassifier_rf  <- caret::train(Group~.,training_dat,method="rf")
parallel::stopCluster(cl)
return(list(knnclassifier = knnclassifier_rf, training_proportion = proportion_getter(training_dat)))
}
run_train = training_part(training_data = train_data)
run_train = training_part(training_dat = train_data[,-c(1,2)])
training_part<-function(training_dat){
cl<-parallel::makePSOCKcluster(n_cores)
doParallel::registerDoParallel(cl)
classifier_rf  <- caret::train(Group~.,training_dat,method="rf")
parallel::stopCluster(cl)
return(list(RFclassifier = classifier_rf, Proportion = proportion_getter(training_dat)))
}
interested_traits = c("Vimentin", "SMA", "CD45", "CD31", "Beta.catenin","Keratin6" )
is.log = "TRUE"
run_train = training_part(training_dat = train_data[,-c(1,2)])
df = train_data[,-c(1,2)]
#-----Generate Heatmaps of different kinds------------
genheatmap(df,is.log=FALSE)
genheatmap(df,is.log=TRUE)
genheatmap<-function(df,is.log = FALSE)
{
if(is.log==TRUE){
df= cbind(df$Group,log((df[,-1]+1),base = 2))
colnames(df)[1] = "Group"
}
summary_mean  = as.data.frame(data.table::setDT(df)[, lapply(.SD, mean), keyby = Group])
rownames(summary_mean) = summary_mean[,1];
summary_mean = summary_mean[,-1]
return(pheatmap::pheatmap(t(summary_mean), cluster_cols = F, cluster_rows = F))
}
#-----Generate Heatmaps of different kinds------------
genheatmap(df,is.log=FALSE)
genheatmap(df,is.log=TRUE)
training_part<-function(training_dat, is.log = FALSE){
if(is.log==TRUE){
training_dat = cbind(training_dat$Group,log((training_dat[,-1]+1),base = 2))
colnames(training_dat)[1] = "Group"
}
cl<-parallel::makePSOCKcluster(n_cores)
doParallel::registerDoParallel(cl)
classifier_rf  <- caret::train(Group~.,training_dat,method="rf")
parallel::stopCluster(cl)
return(list(RFclassifier = classifier_rf, Proportion = proportion_getter(training_dat)))
}
run_train = training_part(training_dat = train_data[,-c(1,2)])
run_train$Proportion
unique(train_data$SampleID)
image_data = train_data[train_data$SampleID==x,]
x
x = 42
head(image_data)
fin_dat = NULL
j = 1
chosen_images = unique(train_data$SampleID)
for(x in chosen_images){
image_data = train_data[train_data$SampleID==x,]
fin_dat = rbind(fin_dat,data.frame(value = image_data[,i], Group,
image_number = paste0("image number =", x)))
j = j+1
}
fin_dat = NULL
j = 1
chosen_images = unique(train_data$SampleID)
for(x in chosen_images){
image_data = train_data[train_data$SampleID==x,]
fin_dat = rbind(fin_dat,data.frame(value = image_data[,i], Group = image_data$Group,
image_number = paste0("image number =", x)))
j = j+1
}
fin_dat$image_number = as.factor(fin_dat$image_number)
dim(fin_dat)
head(fin_dat)
fin_dat = NULL
j = 1
chosen_images = unique(train_data$SampleID)
for(x in chosen_images){
image_data = train_data[train_data$SampleID==x,]
fin_dat = rbind(fin_dat,data.frame(value = image_data[,i], Group = image_data$Group,
image_number = paste0("image number = ", x)))
j = j+1
}
fin_dat$image_number = as.factor(fin_dat$image_number)
fin_dat = NULL
j = 1
chosen_images = unique(train_data$SampleID)
for(x in chosen_images){
image_data = train_data[train_data$SampleID==x,]
fin_dat = rbind(fin_dat,data.frame(value = image_data[,interested_trait],
Group = image_data$Group, image_number = paste0("image number = ", x)))
j = j+1
}
fin_dat$image_number = as.factor(fin_dat$image_number)
interested_trait = c("Vimentin")
interested_trait = c("Vimentin")
fin_dat = NULL
j = 1
chosen_images = unique(train_data$SampleID)
for(x in chosen_images){
image_data = train_data[train_data$SampleID==x,]
fin_dat = rbind(fin_dat,data.frame(value = image_data[,interested_trait],
Group = image_data$Group, image_number = paste0("image number = ", x)))
j = j+1
}
fin_dat$image_number = as.factor(fin_dat$image_number)
p = ggplot(fin_dat, aes(x = value, y = image_number, fill = Group)) +
geom_density_ridges(alpha = .5)+ggtitle(paste0("Ridge plot of ", interested_trait))+
theme(axis.text.y=element_text(size = 35), axis.text.x=element_text(size = 35),
axis.title.x = element_text(size = 38), axis.title.y = element_text(size = 38),
plot.title = element_text(size = 40), legend.title=element_text(size=35),
legend.text=element_text(size=35))
print(p)
p = ggplot2::ggplot(fin_dat, aes(x = value, y = image_number, fill = Group)) +
geom_density_ridges(alpha = .5)+ggtitle(paste0("Ridge plot of ", interested_trait))+
theme(axis.text.y=element_text(size = 35), axis.text.x=element_text(size = 35),
axis.title.x = element_text(size = 38), axis.title.y = element_text(size = 38),
plot.title = element_text(size = 40), legend.title=element_text(size=35),
legend.text=element_text(size=35))
print(p)
p = ggridges::ggplot(fin_dat, aes(x = value, y = image_number, fill = Group)) +
geom_density_ridges(alpha = .5)+ggtitle(paste0("Ridge plot of ", interested_trait))+
theme(axis.text.y=element_text(size = 35), axis.text.x=element_text(size = 35),
axis.title.x = element_text(size = 38), axis.title.y = element_text(size = 38),
plot.title = element_text(size = 40), legend.title=element_text(size=35),
legend.text=element_text(size=35))
p = ggplot2::ggplot(fin_dat, aes(x = value, y = image_number, fill = Group)) +
ggridges::geom_density_ridges(alpha = .5)+ggtitle(paste0("Ridge plot of ", interested_trait))+
theme(axis.text.y=element_text(size = 35), axis.text.x=element_text(size = 35),
axis.title.x = element_text(size = 38), axis.title.y = element_text(size = 38),
plot.title = element_text(size = 40), legend.title=element_text(size=35),
legend.text=element_text(size=35))
print(p)
ggplot(fin_dat, aes(x = value, y = image_number, fill = Group))
p = ggplot2::ggplot(fin_dat, aes(x = value, y = image_number, fill = Group))
head(fin_dat)
require(ggplot2)
p = ggplot2::ggplot(fin_dat, aes(x = value, y = image_number, fill = Group))
ggplot2::ggplot(fin_dat, aes(x = value, y = image_number, fill = Group))
detach(ggplot2)
dettach(ggplot2)
detach("ggplot2")
detach("package:ggplot2", unload = TRUE)
ggplot2::ggplot(fin_dat, aes(x = value, y = image_number, fill = Group))
require(ggplot2)
ridge_plottter<-function(train_data,interested_trait,is.log="TRUE")
{
fin_dat = NULL
j = 1
chosen_images = unique(train_data$SampleID)
for(x in chosen_images){
image_data = train_data[train_data$SampleID==x,]
fin_dat = rbind(fin_dat,data.frame(value = image_data[,interested_trait],
Group = image_data$Group, image_number = paste0("image number = ", x)))
j = j+1
}
fin_dat$image_number = as.factor(fin_dat$image_number)
p = ggplot(fin_dat, aes(x = value, y = image_number, fill = Group)) +
ggridges::geom_density_ridges(alpha = .5)+ggtitle(paste0("Ridge plot of ", interested_trait))+
theme(axis.text.y=element_text(size = 35), axis.text.x=element_text(size = 35),
axis.title.x = element_text(size = 38), axis.title.y = element_text(size = 38),
plot.title = element_text(size = 40), legend.title=element_text(size=35),
legend.text=element_text(size=35))
print(p)
dev.off()
print(i)
}
fin_dat = NULL
j = 1
chosen_images = unique(train_data$SampleID)
for(x in chosen_images){
image_data = train_data[train_data$SampleID==x,]
fin_dat = rbind(fin_dat,data.frame(value = image_data[,interested_trait],
Group = image_data$Group, image_number = paste0("image number = ", x)))
j = j+1
}
fin_dat$image_number = as.factor(fin_dat$image_number)
p = ggplot(fin_dat, aes(x = value, y = image_number, fill = Group)) +
ggridges::geom_density_ridges(alpha = .5)+ggtitle(paste0("Ridge plot of ", interested_trait))+
theme(axis.text.y=element_text(size = 35), axis.text.x=element_text(size = 35),
axis.title.x = element_text(size = 38), axis.title.y = element_text(size = 38),
plot.title = element_text(size = 40), legend.title=element_text(size=35),
legend.text=element_text(size=35))
print(p)
head(fin_dat)
p
p = ggplot(fin_dat, aes(x = value, y = image_number, fill = Group)) +
ggridges::geom_density_ridges(alpha = .5)+ggtitle(paste0("Ridge plot of ",interested_trait))
print(p)
ridge_plottter<-function(train_data,interested_trait,is.log="TRUE")
{
fin_dat = NULL
j = 1
chosen_images = unique(train_data$SampleID)
for(x in chosen_images){
image_data = train_data[train_data$SampleID==x,]
fin_dat = rbind(fin_dat,data.frame(value = image_data[,interested_trait],
Group = image_data$Group, image_number = paste0("image number = ", x)))
j = j+1
}
fin_dat$image_number = as.factor(fin_dat$image_number)
# p = ggplot(fin_dat, aes(x = value, y = image_number, fill = Group)) +
#   ggridges::geom_density_ridges(alpha = .5)+ggtitle(paste0("Ridge plot of ", interested_trait))+
#   theme(axis.text.y=element_text(size = 35), axis.text.x=element_text(size = 35),
#   axis.title.x = element_text(size = 38), axis.title.y = element_text(size = 38),
#   plot.title = element_text(size = 40), legend.title=element_text(size=35),
#   legend.text=element_text(size=35))
p = ggplot(fin_dat, aes(x = value, y = image_number, fill = Group)) +
ggridges::geom_density_ridges(alpha = .5)+ggtitle(paste0("Ridge plot of ",interested_trait))
print(p)
}
ridge_plottter(train_data,interested_trait,is.log="TRUE")
require(ggplot2)
ridge_plottter<-function(train_data,interested_trait,is.log="TRUE")
{
fin_dat = NULL
j = 1
chosen_images = unique(train_data$SampleID)
for(x in chosen_images){
image_data = train_data[train_data$SampleID==x,]
fin_dat = rbind(fin_dat,data.frame(value = ifelse(is.log="FALSE",image_data[,interested_trait],
log((image_data[,interested_trait]+1),base = 2)),
Group = image_data$Group, image_number = paste0("image number = ", x)))
j = j+1
}
fin_dat$image_number = as.factor(fin_dat$image_number)
p = ggplot(fin_dat, aes(x = value, y = image_number, fill = Group)) +
ggridges::geom_density_ridges(alpha = .5)+ggtitle(paste0("Ridge plot of ",interested_trait))
print(p)
}
ridge_plottter(train_data,interested_trait,is.log="TRUE")
require(ggplot2)
ridge_plottter<-function(train_data,interested_trait,is.log="TRUE")
{
fin_dat = NULL
j = 1
chosen_images = unique(train_data$SampleID)
for(x in chosen_images){
image_data = train_data[train_data$SampleID==x,]
fin_dat = rbind(fin_dat,data.frame(value = ifelse(is.log=="FALSE",
image_data[,interested_trait],
log((image_data[,interested_trait]+1),base = 2)),
Group = image_data$Group, image_number = paste0("image number = ", x)))
j = j+1
}
fin_dat$image_number = as.factor(fin_dat$image_number)
p = ggplot(fin_dat, aes(x = value, y = image_number, fill = Group)) +
ggridges::geom_density_ridges(alpha = .5)+ggtitle(paste0("Ridge plot of ",interested_trait))
print(p)
}
ridge_plottter(train_data,interested_trait,is.log="TRUE")
require(ggplot2)
ridge_plottter<-function(train_data,interested_trait,is.log="TRUE")
{
fin_dat = NULL
j = 1
chosen_images = unique(train_data$SampleID)
for(x in chosen_images){
image_data = train_data[train_data$SampleID==x,]
fin_dat = rbind(fin_dat,data.frame(value = ifelse(is.log=="FALSE",
image_data[,interested_trait],
log((image_data[,interested_trait]+1),base = 2)),
Group = image_data$Group, image_number = paste0("image number = ", x)))
j = j+1
}
fin_dat$image_number = as.factor(fin_dat$image_number)
p = ggplot(fin_dat, aes(x = value, y = image_number, color = Group)) +
ggridges::geom_density_ridges(alpha = .5)+ggtitle(paste0("Ridge plot of ",interested_trait))
print(p)
}
ridge_plottter(train_data,interested_trait,is.log="TRUE")
fin_dat = NULL
j = 1
chosen_images = unique(train_data$SampleID)
for(x in chosen_images){
image_data = train_data[train_data$SampleID==x,]
fin_dat = rbind(fin_dat,data.frame(value = ifelse(is.log=="FALSE",
image_data[,interested_trait],
log((image_data[,interested_trait]+1),base = 2)),
Group = image_data$Group, image_number = paste0("image number = ", x)))
j = j+1
}
fin_dat$Group
fin_dat$Group = as.factor(fin_dat$Group)
require(ggplot2)
ridge_plottter<-function(train_data,interested_trait,is.log="TRUE")
{
fin_dat = NULL
j = 1
chosen_images = unique(train_data$SampleID)
for(x in chosen_images){
image_data = train_data[train_data$SampleID==x,]
fin_dat = rbind(fin_dat,data.frame(value = ifelse(is.log=="FALSE",
image_data[,interested_trait],
log((image_data[,interested_trait]+1),base = 2)),
Group = image_data$Group, image_number = paste0("image number = ", x)))
j = j+1
}
fin_dat$image_number = as.factor(fin_dat$image_number)
fin_dat$Group = as.factor(fin_dat$Group)
p = ggplot(fin_dat, aes(x = value, y = image_number, fill = Group)) +
ggridges::geom_density_ridges(alpha = .5)+ggtitle(paste0("Ridge plot of ",interested_trait))
print(p)
}
ridge_plottter(train_data,interested_trait,is.log="TRUE")
fin_dat$Group
fin_dat$Group
p = ggplot(fin_dat, aes(x = value, y = image_number, fill = Group)) +
ggridges::geom_density_ridges(alpha = .5)+ggtitle(paste0("Ridge plot of ",interested_trait))
print(p)
p = ggplot(fin_dat, aes(x = value, y = image_number, fill = Group)) +
ggridges::geom_density_ridges(alpha = .5)+ggtitle(paste0("Ridge plot of ",interested_trait))+
theme(axis.title.y = element_text(size = 0))
print(p)
require(ggridges)
p = ggplot(fin_dat, aes(x = value, y = image_number, fill = Group)) +
geom_density_ridges(alpha = .5)+ggtitle(paste0("Ridge plot of ",
interested_trait))+theme(axis.title.y = element_text(size = 0))
print(p)
p = ggplot(fin_dat, aes(x = value, y = image_number, fill = Group)) +
ggridges::geom_density_ridges(alpha = .5)+ggtitle(paste0("Ridge plot of ",
interested_trait))+theme(axis.title.y = element_text(size = 0))
print(p)
p = ggplot(fin_dat, aes(x = value, y = image_number, fill = Group, color = Group)) +
ggridges::geom_density_ridges(alpha = .5)+ggtitle(paste0("Ridge plot of ",
interested_trait))+theme(axis.title.y = element_text(size = 0))
print(p)
p = ggplot(fin_dat, aes(x = value, y = image_number, fill = Group)) +
ggridges::geom_density_ridges(alpha = .5)+ggtitle(paste0("Ridge plot of ",
interested_trait))+theme(axis.title.y = element_text(size = 0))
print(p)
fin_dat$value
is.log
is.log="FALSE"
fin_dat = NULL
j = 1
chosen_images = unique(train_data$SampleID)
for(x in chosen_images){
image_data = train_data[train_data$SampleID==x,]
fin_dat = rbind(fin_dat,data.frame(value = ifelse(is.log=="FALSE",
image_data[,interested_trait],
log((image_data[,interested_trait]+1),base = 2)),
Group = image_data$Group, image_number = paste0("image number = ", x)))
j = j+1
}
fin_dat$image_number = as.factor(fin_dat$image_number)
fin_dat$Group = as.factor(fin_dat$Group)
p = ggplot(fin_dat, aes(x = value, y = image_number, fill = Group)) +
ggridges::geom_density_ridges(alpha = .5)+ggtitle(paste0("Ridge plot of ",
interested_trait))+theme(axis.title.y = element_text(size = 0))
print(p)
fin_dat$value
head(fin_dat)
head(train_data)
fin_dat$Group
p = ggplot(fin_dat, aes(x = value, y = image_number, fill = fin_dat$Group)) +
ggridges::geom_density_ridges(alpha = .5)+ggtitle(paste0("Ridge plot of ",
interested_trait))+theme(axis.title.y = element_text(size = 0))
print(p)
p = ggplot(fin_dat, aes(x = value, y = image_number, fill = Group)) +
ggridges::geom_density_ridges(alpha = .5)+ggtitle(paste0("Ridge plot of ",
interested_trait))+theme(axis.title.y = element_text(size = 0))
print(p)
fin_dat  = fin_dat[fin_dat$Group=="Mesenchymal-like",]
p = ggplot(fin_dat, aes(x = value, y = image_number, fill = Group)) +
ggridges::geom_density_ridges(alpha = .5)+ggtitle(paste0("Ridge plot of ",
interested_trait))+theme(axis.title.y = element_text(size = 0))
print(p)
fin_dat = NULL
j = 1
chosen_images = unique(train_data$SampleID)
for(x in chosen_images){
image_data = train_data[train_data$SampleID==x,]
fin_dat = rbind(fin_dat,data.frame(value = ifelse(is.log=="FALSE",
image_data[,interested_trait],
log((image_data[,interested_trait]+1),base = 2)),
Group = image_data$Group, image_number = paste0("image number = ", x)))
j = j+1
}
fin_dat$image_number = as.factor(fin_dat$image_number)
fin_dat$Group = as.factor(fin_dat$Group)
fin_dat  = fin_dat[fin_dat$Group=="Keratin-positive tumor",]
q = ggplot(fin_dat, aes(x = value, y = image_number, fill = Group)) +
ggridges::geom_density_ridges(alpha = .5)+ggtitle(paste0("Ridge plot of ",
interested_trait))+theme(axis.title.y = element_text(size = 0))
print(q)
